{
  "id": "example_rubric",
  "name": {
    "text": "H01 | Foreign Contaminants",
    "html": "<strong>H01</strong> <div class=\"arrow right\"></div> Foreign Contaminants"
  },
  "description": {
    "text": "In dieser Hausübung mussten Sie die Bewegung von mehreren Robotern mithilfe der FOPBot-Bibliothek implementieren.",
    "html": "In dieser Hausübung mussten Sie die Bewegung von mehreren Robotern mithilfe der FOPBot-Bibliothek implementieren."
  },
  "possiblePoints": {
    "min": 0,
    "max": 16
  },
  "achievedPoints": {
    "min": 7,
    "max": 10
  },
  "criteria": [
    {
      "id": "1",
      "name": {
        "text": "H1 | Steuerung des \"CleaningRobot\"",
        "html": "<strong>H1</strong> Steuerung des \"CleaningRobot\""
      },
      "description": {
        "text": "In dieser Teilaufgabe mussten Sie die Steuerung des \"CleaningRobot\" implementieren.",
        "html": null
      },
      "possiblePoints": {
        "min": 0,
        "max": 4
      },
      "achievedPoints": {
        "min": 1,
        "max": 1
      },
      "tests": [
        {
          "id": "1",
          "name": "fafafa",
          "state": "FAILURE",
          "message": {
            "text": "fififi",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },{
          "id": "2",
          "name": "Wenn die übergebene Direction >= 0 und < 4 ist, dann schaut der Roboter in die entsprechende Richtung.",
          "state": "FAILURE",
          "message": {
            "text": "The robot should face LEFT.",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "3",
          "name": "Wenn die übergebene Direction >= 0 und < 4 ist, so bewegt sich der Roboter in die entsprechende Richtung, falls der Weg frei ist.",
          "state": "FAILURE",
          "message": {
            "text": "invalid end position.",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "4",
          "name": "shouldPutCoin und shouldPickCoin werden korrekt verarbeitet.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": "<i>The Method threw an exception</i> {<div class=\"pl-4\">worldWidth = 1,<br>worldHeight = 1,<br>walls = [],<br>initialCoinsOnField = 10,<br>canMove = false,<br>contaminant1 (before call) = Robot{id='0', at=[0/0], numberOfCoins=10, direction=LEFT},<br>contaminant1 (after call) = Robot{id='0', at=[0/0], numberOfCoins=5, direction=LEFT}</div>}<br><br><div class=\"alert alert-danger\">java.lang.IllegalArgumentException: bound must be positive<br><div class=\"pl-4\">\tjava.base/java.util.Random.nextInt(Random.java:322)<br>\th01.Contaminant1Test.lambda$testMovement$1(Contaminant1Test.java:105)<br>\th01.TestUtils.lambda$withMockedUtilsClass$2(TestUtils.java:141)<br>\torg.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:42)<br>\torg.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:103)<br>\torg.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)<br>\torg.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34)<br>\torg.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)<br>\torg.mockito.internal.creation.bytebuddy.MockMethodAdvice.handleStatic(MockMethodAdvice.java:148)<br>\th01.template.Utils.getRandomInteger(Unknown Source)<br>...<br></div></div>",
          "duration": 0
        }
      ]
    },
    {
      "id": "H2",
      "name": {
        "text": "Steuerung der \"Contaminant\"-Roboter",
        "html": null
      },
      "description": {
        "text": "",
        "html": null
      },
      "possiblePoints": {
        "min": 0,
        "max": 8
      },
      "achievedPoints": {
        "min": 3,
        "max": 3
      },
      "tests": [
        {
          "id": "5",
          "name": "Wenn der \"Contaminant1\"-Roboter keine Münzen mehr hat, wird er ausgeschaltet und die Methode doMove() führt keine weiteren Aktionen aus.",
          "state": "FAILURE",
          "message": {
            "text": "The robot should be turned off.",
            "html": null
          },
          "stacktrace": "java.lang.IllegalArgumentException: bound must be positive\n...\n",
          "duration": 0
        },
        {
          "id": "6",
          "name": "Der \"Contaminant1\"-Roboter legt korrekt eine zufällige Anzahl an Münzen ab, genau dann wenn er es soll.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "7",
          "name": "Der \"Contaminant1\"-Roboter prüft alle vier Richtungen ab und dreht sich wieder in die Ausgangsrichtung.",
          "state": "FAILURE",
          "message": {
            "text": "The Method threw an exception\njava.lang.IllegalArgumentException: bound must be positive\n...",
            "html": null
          },
          "stacktrace": "java.lang.IllegalArgumentException: bound must be positive\n...\n",
          "duration": 0
        },
        {
          "id": "8",
          "name": "Der \"Contaminant1\"-Roboter bewegt sich korrekt in eine zufällige Richtung, die frei ist, falls eine solche existiert.",
          "state": "FAILURE",
          "message": {
            "text": "The Method threw an exception\njava.lang.IllegalArgumentException: bound must be positive\n...",
            "html": null
          },
          "stacktrace": "java.lang.IllegalArgumentException: bound must be positive\n...\n",
          "duration": 0
        },
        {
          "id": "9",
          "name": "Wenn der \"Contaminant2\"-Roboter keine Münzen mehr hat, wird er ausgeschaltet und die Methode doMove() führt keine weiteren Aktionen aus.",
          "state": "FAILURE",
          "message": {
            "text": "The robot should be turned off.",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "10",
          "name": "Der \"Contaminant2\"-Roboter legt stets die korrekte Anzahl an Münzen ab.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "11",
          "name": "Der \"Contaminant2\"-Roboter prüft alle vier Richtungen ab und dreht sich wieder in die Ausgangsrichtung.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "12",
          "name": "Der \"Contaminant2\"-Roboter bewegt sich korrekt nach dem Bewegungsschema.",
          "state": "FAILURE",
          "message": {
            "text": "invalid end position.",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        }
      ]
    },
    {
      "id": "H3",
      "name": {
        "text": "Gewinnbedingungen",
        "html": null
      },
      "description": {
        "text": "",
        "html": null
      },
      "possiblePoints": {
        "min": 0,
        "max": 4
      },
      "achievedPoints": {
        "min": 3,
        "max": 3
      },
      "tests": [
        {
          "id": "13",
          "name": "Der cleaner gewinnt, wenn alle Contaminants ausgeschaltet sind.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "14",
          "name": "Der cleaner gewinnt, wenn sich in der Abladezone mindestens 200 Münzen befinden.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "15",
          "name": "Die Contaminants gewinnen, wenn mindestens 50% der Felder mit münzen bedeckt sind.",
          "state": "FAILURE",
          "message": {
            "text": "The winner is not correct",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        },
        {
          "id": "16",
          "name": "Wenn beide Parteien gleichzeitig gewinnen, so gewinnt der cleaner.",
          "state": "SUCCESS",
          "message": {
            "text": "",
            "html": null
          },
          "stacktrace": null,
          "duration": 0
        }
      ],
      "children": [
        {
          "id": "H3.1",
          "name": {
            "text": "H3.1 | TEST",
            "html": "<strong>H3.1</strong> | TEST"
          },
          "description": {
            "text": "asdf",
            "html": null
          },
          "possiblePoints": {
            "min": 0,
            "max": 4
          },
          "achievedPoints": {
            "min": 3,
            "max": 3
          },
          "message": {
            "text": "asdf",
            "html": null
          }
        }
      ]
    }
  ]
}
